// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/model.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Model_GetModel_FullMethodName    = "/pb.Model/GetModel"
	Model_UpdateModel_FullMethodName = "/pb.Model/UpdateModel"
	Model_GetByStatus_FullMethodName = "/pb.Model/GetByStatus"
)

// ModelClient is the client API for Model service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelClient interface {
	// SayHello 方法
	GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	UpdateModel(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetByStatus(ctx context.Context, opts ...grpc.CallOption) (Model_GetByStatusClient, error)
}

type modelClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClient(cc grpc.ClientConnInterface) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, Model_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) UpdateModel(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Model_UpdateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) GetByStatus(ctx context.Context, opts ...grpc.CallOption) (Model_GetByStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[0], Model_GetByStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelGetByStatusClient{stream}
	return x, nil
}

type Model_GetByStatusClient interface {
	Send(*StatusRequest) error
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type modelGetByStatusClient struct {
	grpc.ClientStream
}

func (x *modelGetByStatusClient) Send(m *StatusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelGetByStatusClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelServer is the server API for Model service.
// All implementations must embed UnimplementedModelServer
// for forward compatibility
type ModelServer interface {
	// SayHello 方法
	GetModel(context.Context, *ModelRequest) (*ModelResponse, error)
	UpdateModel(context.Context, *UpdateRequest) (*UpdateResponse, error)
	GetByStatus(Model_GetByStatusServer) error
	mustEmbedUnimplementedModelServer()
}

// UnimplementedModelServer must be embedded to have forward compatible implementations.
type UnimplementedModelServer struct {
}

func (UnimplementedModelServer) GetModel(context.Context, *ModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelServer) UpdateModel(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServer) GetByStatus(Model_GetByStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByStatus not implemented")
}
func (UnimplementedModelServer) mustEmbedUnimplementedModelServer() {}

// UnsafeModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServer will
// result in compilation errors.
type UnsafeModelServer interface {
	mustEmbedUnimplementedModelServer()
}

func RegisterModelServer(s grpc.ServiceRegistrar, srv ModelServer) {
	s.RegisterService(&Model_ServiceDesc, srv)
}

func _Model_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).GetModel(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).UpdateModel(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_GetByStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).GetByStatus(&modelGetByStatusServer{stream})
}

type Model_GetByStatusServer interface {
	Send(*StatusResponse) error
	Recv() (*StatusRequest, error)
	grpc.ServerStream
}

type modelGetByStatusServer struct {
	grpc.ServerStream
}

func (x *modelGetByStatusServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelGetByStatusServer) Recv() (*StatusRequest, error) {
	m := new(StatusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Model_ServiceDesc is the grpc.ServiceDesc for Model service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Model_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModel",
			Handler:    _Model_GetModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _Model_UpdateModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByStatus",
			Handler:       _Model_GetByStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/model.proto",
}
